apiVersion: v1
kind: ConfigMap
metadata:
  name: middleware-citus
data:
  middleware_citus.py: |
    from flask import Flask, jsonify, request
    import psycopg2
    from psycopg2.extras import RealDictCursor
    import os
    import logging
    import time

    app = Flask(__name__)
    logging.basicConfig(level=logging.INFO)

    # Configuraci√≥n de la base de datos
    DB_CONFIG = {
        'host': os.getenv('POSTGRES_HOST', 'citus-coordinator'),
        'port': int(os.getenv('POSTGRES_PORT', '5432')),
        'user': os.getenv('POSTGRES_USER', 'admin'),
        'password': os.getenv('POSTGRES_PASSWORD', 'admin'),
        'dbname': os.getenv('POSTGRES_DB', 'historia_clinica')
    }

    def wait_for_db():
        """Esperar a que la base de datos est√© disponible"""
        max_retries = 30
        for i in range(max_retries):
            try:
                conn = psycopg2.connect(**DB_CONFIG)
                conn.close()
                print(f"‚úÖ Conexi√≥n a la base de datos establecida")
                return True
            except Exception as e:
                print(f"‚è≥ Esperando base de datos... intento {i+1}/{max_retries}: {e}")
                time.sleep(2)
        return False

    def get_db_connection():
        try:
            conn = psycopg2.connect(**DB_CONFIG)
            return conn
        except Exception as e:
            app.logger.error(f"Error conectando a la base de datos: {e}")
            return None

    @app.route('/')
    def health_check():
        return jsonify({"status": "healthy", "service": "middleware-citus", "version": "1.0"})

    @app.route('/status')
    def status():
        try:
            conn = get_db_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute("SELECT version();")
                version = cursor.fetchone()[0]
                cursor.close()
                conn.close()
                return jsonify({"status": "connected", "postgres_version": version})
            else:
                return jsonify({"status": "error", "message": "No se pudo conectar a la base de datos"}), 500
        except Exception as e:
            return jsonify({"status": "error", "message": str(e)}), 500

    @app.route('/usuarios')
    def get_usuarios():
        try:
            conn = get_db_connection()
            if conn:
                cursor = conn.cursor(cursor_factory=RealDictCursor)
                cursor.execute("SELECT * FROM usuario LIMIT 10;")
                usuarios = cursor.fetchall()
                cursor.close()
                conn.close()
                return jsonify({"usuarios": [dict(u) for u in usuarios]})
            else:
                return jsonify({"error": "No se pudo conectar a la base de datos"}), 500
        except Exception as e:
            return jsonify({"error": str(e)}), 500

    @app.route('/citus/workers')
    def get_workers():
        try:
            conn = get_db_connection()
            if conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM master_get_active_worker_nodes();")
                workers = cursor.fetchall()
                cursor.close()
                conn.close()
                return jsonify({"workers": workers})
            else:
                return jsonify({"error": "No se pudo conectar a la base de datos"}), 500
        except Exception as e:
            return jsonify({"error": str(e)}), 500

    if __name__ == '__main__':
        print("üöÄ Iniciando middleware...")
        if wait_for_db():
            print("üåê Iniciando servidor Flask en puerto 8080...")
            app.run(host='0.0.0.0', port=8080, debug=True)
        else:
            print("‚ùå No se pudo conectar a la base de datos")
            exit(1)
